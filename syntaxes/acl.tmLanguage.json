{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "assembled cpu language",
	"patterns": [
		{
			"include": "#statments"
		}
	],
	"repository": {
		"statments": {
			"patterns": [
				{
					"name": "variable.label.ACL",
					"match": "^[\\s]*[A-Za-z_][A-Za-z_0-9]*:"
				},
				{
					"name": "keyword.control.ACL",
					"comment": "BGC instructions upper",
					"match": "^[\\s]*[A-Za-z]+"
				},
				{
					"name": "variable.name",
					"match": "\\$[A-Z-a-z_][A-Z-a-z_0-9]*"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#directives"
				},
				{
					"include": "#marcos"
				},
				{
					"include": "#struct"
				},
				{
					"name": "comment.line.simicolon",
					"match": "[\\s]*;.*"
				}
			]
		},
		"marcos": {
			"patterns": [
				{
					"name": "keyword.control.marco",
					"match": "^\\@[A-Za-z]*\\s\\%[A-Za-z]*"
				},
				{
					"name": "keyword.control.marco.arguments",
					"comment": "Marco arguments in use",
					"match": "[,\\s]*\\%[A-Za-z]*"
				},
				{
					"name": "keyword.control.marco.end",
					"match": "[,\\s]*\\.ENDM"
				}
			]
		},
		"directives": {
			"patterns": [
				{
					"name": "keyword.control.directive.byte.ACL",
					"match": "[\\s]*\\.\\b(byte|db)"
				},
				{
					"name": "keyword.control.directive.word.ACL",
					"match": "[\\s]*\\.\\b(word|dw)"
				},
				{
					"name": "keyword.control.directive.tbyte.ACL",
					"match": "[\\s]*\\.\\b(tbyte|dt)"
				},
				{
					"name": "keyword.control.directive.dword.ACL",
					"match": "[\\s]*\\.\\b(dword|dd)"
				},
				{
					"name": "keyword.control.directive.section",
					"match": "[\\s]*\\.\\b(section|SECTION)\\b"
				},
				{
					"name": "keyword.control.directive",
					"comment": "global",
					"match": "^[\\s]*\\.\\b(global|GLOBAL)\\s[A-Za-z_][A-Za-z_\\d]*"
				},
				{
					"name": "keyword.control.directive",
					"comment": "local",
					"match": "^[\\s]*\\.\\b(local|LOCAL)\\s[A-Za-z_][A-Za-z_\\d]*"
				},
				{
					"name": "keyword.control.directive",
					"comment": "setcpu",
					"match": "^[\\s]*\\.\\b(setcpu|SETCPU)"
				},
				{
					"name": "keyword.control.directive",
					"comment": "extern",
					"match": "^[\\s]*\\.\\b(extern|EXTERN)"
				},
				{
					"name": "keyword.control.directive.includeil",
					"comment": "include file in line",
					"match": "[\\s]*\\.\\b(includeil|INCLUDEIL)"
				},
				{
					"name": "keyword.control.directive.include",
					"comment": "include file",
					"match": "[\\s]*\\.\\b(include|INCLUDE)"
				},
				{
					"name": "keyword.control.directive.org",
					"match": "[\\s]*\\.\\b(org|ORG)"
				},
				{
					"name": "keyword.control.directive.endStruct",
					"match": "^\\.endstruct"
				},
				{
					"name": "keyword.control.directive.ACL",
					"match": "[\\s]*\\.\\b(res.|RES.)"
				},
				{
					"name": "keyword.control.directive.res.ACL",
					"match": "[\\s]*\\.\\b(res|RES)"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"name": "variable.language.ACL",
					"comment": "ACL register name",
					"match": "[\\s,]*\\b(pc|cr0|f||PC|CR0|F|)\\b[\\s,]"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL R register name",
					"match": "[\\s,]*\\b(R[\\d]+[A-Z]*|r[\\d]+[a-z]*)[\\s,]"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL GP register name",
					"match": "[\\s,]*\\b(a[a-z]|b[a-z]|c[a-z]|d[a-z]|a|b|c|d|hl|h|l|A[A-Z]|B[A-Z]|C[A-Z]|D[A-Z]|A|B|C|D|HL|H|L)\\b[\\s,]"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL Stack register name",
					"match": "[\\s,]*\\b(bpx|bp|spx|sp|BPX|BP|SPX|SP)\\b[\\s,]"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL segment register name",
					"match": "[\\s,]*\\b([A-Z]+S|[a-z]+s)\\b[\\s,]"
				},
				{
					"comment": "for Paths and shit",
					"name": "constant.character",
					"match": "[\\s]*[\\.]/[A-Za-z/]*\\.[A-Za-z]*"
				},
				{
					"name": "string.quoted.double.ACL",
					"begin": "[\\s,]*\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ACL",
							"match": "\\[\\.]"
						}
					]
				},
				{
					"name": "string.quoted.single.ACL",
					"begin": "[\\s,]*\\'",
					"end": "\\'",
					"patterns": [
						{
							"name": "constant.character.escape.ACL",
							"match": "\\[\\.]"
						}
					]
				},
				{
					"comment": "Segment Address [register:register]",
					"name": "variable.language.segment",
					"match": "[,\\s]*\\[[A-Za-z]+:[A-Za-z]+\\]"
				},
				{
					"comment": "high Address []",
					"name": "variable.language.high",
					"match": "[,\\s]*\\b(high|HIGH)"
				},
				{
					"comment": "low Address []",
					"name": "variable.language.low",
					"match": "[,\\s]*\\b(low|LOW)"
				},
				{
					"comment": "near Address []",
					"name": "variable.language.near",
					"match": "[,\\s]*\\b(near|NEAR)"
				},
				{
					"comment": "short Address []",
					"name": "variable.language.short",
					"match": "[,\\s]*\\b(short|SHORT)"
				},
				{
					"comment": "Long Address []",
					"name": "variable.language.long",
					"match": "[,\\s]*\\b(long|LONG)"
				},
				{
					"comment": "Far Address []",
					"name": "variable.language.far",
					"match": "[,\\s]*\\b(far|FAR)"
				},
				{
					"comment": "rel Address []",
					"name": "variable.language.rel",
					"match": "[,\\s]*\\b(rel|REL)"
				},
				{
					"comment": "Address []",
					"name": "variable.language",
					"match": "[,\\s]*\\[(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*|[A-Za-z_][A-Za-z_\\d]*)\\]"
				},
				{
					"name": "variable.language",
					"match": "[,\\s]*\\$"
				},
				{
					"name": "variable.language",
					"match": "[,\\s]*\\%[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"name": "variable.language",
					"match": "[,\\s]*\\@[A-Za-z_][A-Za-z_\\d]*"
				},
				{
					"name": "constant.numeric",
					"match": "[,\\s]*(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*)"
				},
				{
					"name": "constant.numeric.signed",
					"match": "[,\\s]*-(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*)"
				},
				{
					"name": "constant.numeric.floats",
					"match": "[,\\s]*\\([\\d_\\.]*\\)f"
				},
				{
					"name": "variable.parameter",
					"match": "[,\\s]*\\&[A-Za-z_]*"
				},
				{
					"name": "storage.modifier.byte.ACL",
					"match": "[\\s]*byte"
				},
				{
					"name": "storage.modifier.word.ACL",
					"match": "[\\s]*word"
				},
				{
					"name": "storage.modifier.tbyte.ACL",
					"match": "[\\s]*tbyte"
				},
				{
					"name": "storage.modifier.dword.ACL",
					"match": "[\\s]*dword"
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"name": "entity.name.class",
					"match": "^\\.struct\\s[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"name":"entity.name",
					"match": "\\s[\\s]*[A-Za-z_][A-Za-z_0-9]*\\s"
				}
			]
		}
	},
	"scopeName": "source.acl"
}