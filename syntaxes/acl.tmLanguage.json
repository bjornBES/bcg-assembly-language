{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "assembled cpu language",
	"patterns": [
		{
			"include": "#statments"
		}
	],
	"repository": {
		"statments": {
			"patterns": [
				{
					"name": "variable.label.ACL",
					"match": "^[\\s]*[A-Za-z_][A-Za-z_0-9]*:"
				},
				{
					"name": "keyword.control.ACL",
					"comment": "BGC instructions upper",
					"match": "^[\\s]*\\b(MOV[A-Z]|MOV)\\s"
				},
				{
					"name": "keyword.control.ACL",
					"comment": "BGC instructions lower",
					"match": "^[\\s]*\\b(mov[a-z]|mov)\\s"
				},
				{
					"name": "variable.name",
					"match": "\\$[A-Z-a-z_][A-Z-a-z_0-9]*"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#directives"
				},
				{
					"include": "#marcos"
				},
				{
					"include": "#struct"
				},
				{
					"name": "comment.line.simicolon",
					"match": "[\\s]*;\\s.*"
				}
			]
		},
		"marcos": {
			"patterns": [
				{
					"name": "keyword.control.marco",
					"match": "^\\@[A-Za-z]*\\s\\%[A-Za-z]*"
				},
				{
					"name": "keyword.control.marco.arguments",
					"comment": "Marco arguments in use",
					"match": "[,\\s]*\\%[A-Za-z]*"
				},
				{
					"name": "keyword.control.marco.end",
					"match": "[,\\s]*\\.ENDM"
				}
			]
		},
		"directives": {
			"patterns": [
				{
					"name": "storage.modifier.byte.ACL",
					"match": "[\\s]*\\.\\b(byte|db)"
				},
				{
					"name": "storage.modifier.word.ACL",
					"match": "[\\s]*\\.\\b(word|dw)"
				},
				{
					"name": "storage.modifier.tbyte.ACL",
					"match": "[\\s]*\\.\\b(tbyte|dt)"
				},
				{
					"name": "storage.modifier.dword.ACL",
					"match": "[\\s]*\\.\\b(dword|dd)"
				},
				{
					"name": "keyword.control.directive.section",
					"match": "[\\s]*\\.\\b(section|SECTION)\\b\\s\\b(DATA|TEXT|HEADER)\\b"
				},
				{
					"name": "storage.modifier.visibility",
					"comment": "global",
					"match": "^[\\s]*\\.\\b(global|GLOBAL)\\s[A-Za-z_]*:"
				},
				{
					"name": "keyword.control.directive.includeil",
					"comment": "include file in line",
					"match": "[\\s]*\\.\\b(includeil|INCLUDEIL)"
				},
				{
					"name": "keyword.control.directive.include",
					"comment": "include file",
					"match": "[\\s]*\\.\\b(include|INCLUDE)"
				},
				{
					"name": "keyword.control.directive.org",
					"match": "[\\s]*\\.\\b(org|ORG)"
				},
				{
					"name": "keyword.control.directive.struct",
					"match": "^\\.struct"
				},
				{
					"name": "keyword.control.directive.endStruct",
					"match": "^\\.EndStruct"
				},
				{
					"name": "storage.modifier.byte.ACL",
					"match": "[\\s]*\\.\\b(resbyte|RESBYTE)"
				},
				{
					"name": "storage.modifier.word.ACL",
					"match": "[\\s]*\\.\\b(resword|RESWORD)"
				},
				{
					"name": "storage.modifier.tbyte.ACL",
					"match": "[\\s]*\\.\\b(restbyte|RESTBYTE)"
				},
				{
					"name": "storage.modifier.dword.ACL",
					"match": "[\\s]*\\.\\b(resdword|RESDWORD)"
				},
				{
					"name": "storage.modifier.res.ACL",
					"match": "[\\s]*\\.\\b(res|RES)"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"name": "variable.language.ACL",
					"comment": "ACL register name",
					"match": "[\\s]*\\b(pc[h-l]|f|il|sp|bp|r[1-4]|f[1-4]|s|ds|mb|PC[H-L]|F|IL|SP|BP|R[1-4]|F[1-4]|S|DS|MB)\\b"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL GP register name",
					"match": "[\\s]*\\b(a[a-z]|b[a-z]|c[a-z]|d[a-z]|a|b|c|d|hl|h|l|A[A-Z]|B[A-Z]|C[A-Z]|D[A-Z]|A|B|C|D|HL|H|L)\\b"
				},
				{
					"name": "variable.language.ACL",
					"comment": "ACL Stack register name",
					"match": "[\\s]*\\b(bpx|bp|spx|sp|BPX|BP|SPX|SP)\\b"
				},
				{
					"comment": "for Paths and shit",
					"name": "constant.character",
					"match": "[\\s]*[\\.]/[A-Za-z/]*\\.[A-Za-z]*"
				},
				{
					"name": "string.quoted.double.ACL",
					"begin": "[\\s,]*\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ACL",
							"match": "\\[\\.]"
						}
					]
				},
				{
					"name": "string.quoted.single.ACL",
					"begin": "[\\s,]*\\'",
					"end": "\\'",
					"patterns": [
						{
							"name": "constant.character.escape.ACL",
							"match": "\\[\\.]"
						}
					]
				},
				{
					"comment": "Segment Address [register:register]",
					"name": "variable.parameter.segment",
					"match": "[,\\s]*\\[(a|b|c|d|hl|h|l|sp|bp|s|ds|A|B|C|D|HL|H|L|SP|BP|S|DS):(a|b|c|d|hl|h|l|sp|bp|s|ds|A|B|C|D|HL|H|L|SP|BP|S|DS)\\]"
				},
				{
					"comment": "Segment Address [immdiate:register]",
					"name": "variable.parameter.segment",
					"match": "[,\\s]*\\[(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*):(a|b|c|d|hl|h|l|sp|bp|s|ds|A|B|C|D|HL|H|L|SP|BP|S|DS)\\]"
				},
				{
					"comment": "Long Address []",
					"name": "variable.parameter.long",
					"match": "[,\\s]*\\b(long|LONG)\\s\\[(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*|[A-Za-z_]*)\\]"
				},
				{
					"comment": "Far Address []",
					"name": "variable.parameter.far",
					"match": "[,\\s]*\\b(far|FAR)\\s\\[(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*|[A-Za-z_]*)\\]"
				},
				{
					"comment": "Address []",
					"name": "variable.parameter",
					"match": "[,\\s]*\\[(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*|[A-Za-z_]*)\\]"
				},
				{
					"name": "variable.parameter",
					"match": "[,\\s]*\\$"
				},
				{
					"name": "variable.parameter.label",
					"match": "[,\\s]*\\%[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"name": "variable.parameter.label",
					"match": "[,\\s]*\\@[A-Za-z_]*"
				},
				{
					"comment": "Long Address []",
					"name": "variable.parameter.label.long",
					"match": "[,\\s]*\\b(long|LONG)\\s\\@[A-Za-z_]*"
				},
				{
					"comment": "Far Address []",
					"name": "variable.parameter.label.far",
					"match": "[,\\s]*\\b(far|FAR)\\s\\@[A-Za-z_]*"
				},
				{
					"name": "constant.numeric",
					"match": "[,\\s]*(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*)"
				},
				{
					"name": "constant.numeric.signed",
					"match": "[,\\s]*-(0b[10][10_]*|0x[\\h][\\h_]*|\\$[\\h][\\h_]*|[\\d][\\d_]*)"
				},
				{
					"name": "constant.numeric.floats",
					"match": "[,\\s]*\\([\\d_\\.]*\\)f"
				},
				{
					"name": "variable.parameter",
					"match": "[,\\s]*\\&[A-Za-z_]*"
				},
				{
					"name": "storage.modifier.byte.ACL",
					"match": "[\\s]*byte"
				},
				{
					"name": "storage.modifier.word.ACL",
					"match": "[\\s]*word"
				},
				{
					"name": "storage.modifier.tbyte.ACL",
					"match": "[\\s]*tbyte"
				},
				{
					"name": "storage.modifier.dword.ACL",
					"match": "[\\s]*dword"
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"name": "entity.name.class",
					"match": "\\s[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"name":"entity.name",
					"match": "\\s[\\s]*[A-Za-z_][A-Za-z_0-9]*\\s"
				}
			]
		}
	},
	"scopeName": "source.acl"
}